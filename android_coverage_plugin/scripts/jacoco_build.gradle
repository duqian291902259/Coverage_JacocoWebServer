apply plugin: 'jacoco'

//子模块引用
//apply from: '../scripts/jacoco_build.gradle'

jacoco {
    toolVersion = "0.8.7"
    //toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
def TAG = "dq-jacoco-gradle"
def groupName = "dq-jacoco"
//复制classes文件到cc-start/classes/目录中，需要同步到git
task copyClassesFile(type: Copy) {
    group = groupName
    def targetClassesDir = "${project.projectDir}/classes/"
    //delete targetClassesDir
    //println("$TAG delete $targetClassesDir")
    from("$buildDir/intermediates/javac/debug/classes").exclude('**/*BR.class').exclude('**/BuildConfig.class')
    into(targetClassesDir)
    include 'com/duqian/cc/**/*.class'

    from("$buildDir/tmp/kotlin-classes/debug").exclude('**/*BR.class').exclude('**/BuildConfig.class')
    into(targetClassesDir)
    include 'com/duqian/cc/**/*.class'

    doLast {
        println("$TAG copyFile doLast delete empty dir from $targetClassesDir")
        deleteEmptyDir(new File(targetClassesDir))
    }
}

/**
 * 执行class->zip打包操作
 */
task zipClassesFile(type: Zip, dependsOn: copyClassesFile) {
    group = groupName
    from "${project.projectDir}/classes/"
    destinationDir file("${project.projectDir}")

    baseName 'classes'
    appendix ''
    version ''
    extension 'zip'
    classifier ''
}

//build.dependsOn zipClassesFile

def deleteEmptyDir(dirForDelete) {
    dirForDelete.eachDir { d ->
        if (d.isDirectory() && d.list().length == 0) d.delete()
        else {
            deleteEmptyDir(d)
            d.delete()
        }
    }
}

//源代码路径
def coverageSourceDirs = [
        "$projectDir\\src\\main\\java",
]

//class文件路径
def coverageClassDirs = [
        "$buildDir/intermediates/javac/debug/classes",
        "$buildDir/tmp/kotlin-classes/debug",
]
def isEnable = true
//解析ec文件的任务，会根据指定的class路径、源码路径、ec路径进行解析输出
task jacocoReportForModule(type: JacocoReport) {
    if (!isEnable) return
    group = groupName
    description = "Generate Jacoco coverage reports for modules ${getProject().getName()}"
    System.out.println("$TAG description=$description")
    doFirst {
        delete fileTree(dir: "${buildDir}/classes", include: "**/JiBX_*.class")
    }
    reports {
        xml.enabled = false
        html.enabled = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    def dirs = files(files(coverageClassDirs).files.collect {
        fileTree(dir: it,
                // 过滤不需要统计的class文件
                excludes: ['**/R*.class',
                           '**/BR*.class',
                           '**/io/realm/**.class',
                           '**/Dagger**.class',
                           '**/databinding/*.class',
                           '**/BuildConfig.class',
                           '**/DataBindingInfo.class',
                           '**/DataBinderMapperImpl*.class',
                           '**/*$InjectAdapter.class',
                           '**/*$ModuleAdapter.class',
                           '**/*$ViewInjector*.class'
                ])
    })
    getClassDirectories().setFrom(dirs)

    sourceDirectories.setFrom(coverageSourceDirs)
    System.out.println("$TAG coverageSourceDirs=${coverageSourceDirs}")
    System.out.println("$TAG coverageClassDirs=${coverageClassDirs}")

    //String execPath = "$buildDir/outputs/code_coverage/connected/coverage.ec"
    def executionDataDir = "${projectDir.getParentFile().absolutePath}/app/build/outputs/code_coverage/connected/"
    List<String> executionDataPaths = new ArrayList<>()
    File executionDataFile = new File(executionDataDir)
    executionDataFile.listFiles().each {
        executionDataPaths.add(it.absolutePath)
    }
    //路径用指定的目录，不用每个module下面存
    executionData.setFrom(executionDataPaths)
    System.out.println("$TAG executionDataDir=${executionDataDir},executionDataPaths=${executionDataPaths.size()}")

    doFirst {
        System.out.println("$TAG buildDir=$buildDir")
        System.out.println("$TAG projectDir=$projectDir")
        //遍历class路径下的所有文件，替换字符
        coverageClassDirs.each { path ->
            new File(path).eachFileRecurse { file ->
                if (file.name.contains('$$')) {
                    System.out.println("file=$file")
                    file.renameTo(file.path.replace('$$', '$'))
                    System.out.println("new file=$file")
                }
            }
        }
    }
    doLast {
        generate()//调用jacoco生成report
        System.out.println("$TAG generate")
    }
}

//初始化Jacoco Task
/*task jacocoInit() {
   group = groupName
    doFirst {
        File file2 = new File("$buildDir/outputs/code_coverage/connected/")
        if (!file2.exists()) {
            file2.mkdir()
        }
    }
}*/
