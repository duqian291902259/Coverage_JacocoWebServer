private void checkApply(String name) {
    if (!project.plugins.hasPlugin(name)) {
        project.plugins.apply(name)
    } else {
        println(">>>>has maven publish plugin:" + version)
    }
}

checkApply('maven-publish')
apply plugin: 'maven-publish'

group project.property("GROUP_ID")
version "1.0.0"

println(">>>>>>>>>>>>>>>>>> maven publish version:" + version)

def baseUrl = "http://xx.com/nexus/content/repositories"
def snapshotsRepoUrl = "$baseUrl/snapshots"
def releasesRepoUrl = "$baseUrl/releases"

println ">>>>>>>>>>>>> " + version
println ">>>>>>>>>>>>> " + group

/*def javadoc = task("Javadoc", type: Javadoc) {
    options.encoding = 'utf-8'
    classpath += files(configurations.implementation)
    failOnError false
}

def javadocJar = task("javadocJar", type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def sourcesJar = task("sourcesJar", type: Jar) {
    classifier = 'sources'
    def srcDirs = []
    def sources = project.sourceSets.main
    ['java', 'groovy', 'scala', 'kotlin'].each {
        if (sources.hasProperty(it))
            srcDirs << sources[it].srcDirs
    }

    from srcDirs
}*/

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}


publishing {
    publications {
        //"${project.name}"(MavenPublication) {
        maven (MavenPublication) {
            //java/release/all
            //from components.all
            groupId = group
            artifactId "${project.name}"
            version = version
            //artifact sourcesJar
            //artifact javadocJar

            def isRelease
            if (project.AAR_BUILD_TYPE == "undefined") {
                if (rootProject.ext.has('isRelease')) {
                    isRelease = rootProject.ext.isRelease
                } else {
                    println "================= build type unknown ================="
                    return
                }
            } else if (project.AAR_BUILD_TYPE == "release") {
                isRelease = true
            } else if (project.AAR_BUILD_TYPE == "snapshot") {
                isRelease = false
            } else {
                println "================= build type unknown ================="
                return
            }
            println "==========repositories========= isRelease:" + isRelease
            //name = 'mavenCentralReleaseDeployer'
            def maven_password = System.getenv("MAVEN_REPO_PWD")//project.MAVEN_PASSWORD

            if (isRelease) {
                repository(url: project.RELEASE_URL) { //修改为自己刚才创建的仓库地址
                    authentication(userName: project.MAVEN_USERNAME, password: maven_password)
                }
                pom.version = project.AAR_VERSION;
            } else {
                repository(url: project.SNAPSHOT_URL) {
                    authentication(userName: project.MAVEN_USERNAME, password: maven_password)
                }
                pom.version = project.AAR_SNAPSHOT_VERSION;
            }
            pom.artifactId = project.POM_ARTIFACTID
            pom.groupId = project.POM_GROUPID
            pom.name = project.POM_NAME
            pom.packaging = project.POM_PACKAGING
        }
    }

    repositories {
        maven {
            name "DQNexus"
            url = uri('../repo')
            //url = layout.buildDirectory.dir('repo')

            /*url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                //username = System.getenv("nexusUsername")//duq...02
                //password = System.getenv("nexusPassword")//dq2
                username = project.property("nexusUsername")
                password = project.property("nexusPassword")
            }*/
        }

    }
}
