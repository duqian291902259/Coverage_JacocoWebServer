//apply plugin: 'digital.wup.android-maven-publish'


private void checkApply(String name) {
    if (!project.plugins.hasPlugin(name)) {
        project.plugins.apply(name)
    }
}

checkApply('maven-publish')

//group GROUP_ID
//version sdkVersion

println(">>>>>>>>>>>>>>>>>> maven publish version:" + version)

def baseUrl = "http://nexus.cc.163.com/nexus/content/repositories"
def snapshotsRepoUrl = "$baseUrl/snapshots"
def releasesRepoUrl = "$baseUrl/releases"

println ">>>>>>>>>>>>> " + version
println ">>>>>>>>>>>>> " + group

def javadoc = task("Javadoc", type: Javadoc) {
    options.encoding = 'utf-8'
    classpath += files(configurations.compile)
    failOnError false
}

def javadocJar = task("javadocJar", type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def sourcesJar = task("sourcesJar", type: Jar) {
    classifier = 'sources'
    def srcDirs = []
    def sources = project.sourceSets.main
    ['java', 'groovy', 'scala', 'kotlin'].each {
        if (sources.hasProperty(it))
            srcDirs << sources[it].srcDirs
    }

    from srcDirs
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}


publishing {
    publications {
        "${project.name}"(MavenPublication) {
            from components.java
            groupId = group
            artifactId "${project.name}"
            version = version
            artifact sourcesJar
            artifact javadocJar
        }
    }

    repositories {
        maven {
            name "CcNexus"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("nexusUsername")//duq...02
                password = System.getenv("nexusPassword")//dq2
            }
        }

    }
}
